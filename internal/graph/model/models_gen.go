// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type MutationResponse interface {
	IsMutationResponse()
	GetCode() string
	GetSuccess() bool
	GetMessage() *string
	GetErrors() []*string
}

type AuthMutationResponse struct {
	Code         string    `json:"code"`
	Success      bool      `json:"success"`
	Message      string    `json:"message"`
	Errors       []*string `json:"errors,omitempty"`
	AccessToken  *string   `json:"accessToken,omitempty"`
	RefreshToken *string   `json:"refreshToken,omitempty"`
	User         *User     `json:"user,omitempty"`
}

func (AuthMutationResponse) IsMutationResponse()      {}
func (this AuthMutationResponse) GetCode() string     { return this.Code }
func (this AuthMutationResponse) GetSuccess() bool    { return this.Success }
func (this AuthMutationResponse) GetMessage() *string { return &this.Message }
func (this AuthMutationResponse) GetErrors() []*string {
	if this.Errors == nil {
		return nil
	}
	interfaceSlice := make([]*string, 0, len(this.Errors))
	for _, concrete := range this.Errors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type CreateUserInput struct {
	Username string   `json:"username"`
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Role     UserType `json:"role"`
}

type Manager struct {
	UserID   string `json:"userId"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type Member struct {
	UserID   string `json:"userId"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type Mutation struct {
}

type Query struct {
}

type Team struct {
	TeamID        string     `json:"teamId"`
	TeamName      string     `json:"teamName"`
	Managers      []*Manager `json:"managers"`
	Members       []*Member  `json:"members,omitempty"`
	TotalManagers int32      `json:"totalManagers"`
	TotalMembers  *int32     `json:"totalMembers,omitempty"`
	CreatedAt     *string    `json:"createdAt,omitempty"`
	UpdatedAt     *string    `json:"updatedAt,omitempty"`
}

type UpdateUserInput struct {
	Username *string   `json:"username,omitempty"`
	Email    *string   `json:"email,omitempty"`
	Role     *UserType `json:"role,omitempty"`
}

type User struct {
	UserID    string   `json:"userId"`
	Username  string   `json:"username"`
	Email     string   `json:"email"`
	Role      UserType `json:"role"`
	CreatedAt *string  `json:"createdAt,omitempty"`
}

type UserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UserMutationResponse struct {
	Code    string    `json:"code"`
	Success bool      `json:"success"`
	Message *string   `json:"message,omitempty"`
	Errors  []*string `json:"errors,omitempty"`
	User    *User     `json:"user,omitempty"`
}

func (UserMutationResponse) IsMutationResponse()      {}
func (this UserMutationResponse) GetCode() string     { return this.Code }
func (this UserMutationResponse) GetSuccess() bool    { return this.Success }
func (this UserMutationResponse) GetMessage() *string { return this.Message }
func (this UserMutationResponse) GetErrors() []*string {
	if this.Errors == nil {
		return nil
	}
	interfaceSlice := make([]*string, 0, len(this.Errors))
	for _, concrete := range this.Errors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type UserType string

const (
	UserTypeManager UserType = "MANAGER"
	UserTypeMember  UserType = "MEMBER"
)

var AllUserType = []UserType{
	UserTypeManager,
	UserTypeMember,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeManager, UserTypeMember:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
